# 1) Worker-Process (number | auto):
# - number: Deve acompanhar o numero de 'cores' da 'CPU de deploy',
#           Define quantos processos de trabalho Nginx criara
# - auto: autodetecta o numro de cores disponiveis
worker_processes auto;

# 1.1) LOG Localization
error_log /var/log/nginx/error.log warn;

# 2) Events: como o Nginx gerencia as conexões de rede.
events {
# 2.1) Worker-Connections: (PERFORMANCE)
# - Qtde de 'conexões simultaneas' cada 'Worker-Process' roda
            worker_connections 1024;
       }

# 3) http:
# - Comportamentos Geral aplicavel a todas conexões HTTP processadas
http {

# 3.1) sendfile: (PERFORMANCE)
# - o Nginx pede ao OS para transf. o arquivo 'direto' do disco
#   para a 'rede/client' nao passando pelo 'buffer do Nginx'.
# - Economiza CPU e Memoria
     sendfile on;

# - Suprime o Versao do Nginx na Request
     server_tokens off;

# - Tamanho maximo do 'body' da request
     client_max_body_size 1m;

# 3.2) "upstream": (PERFORMANCE)
# - Define o 'grupo de servers' do 'balanceamento de carga'
    upstream servers-para-loadbalancing {

# 3.2.1) Tipo de Algoritmo de Balanceamento de Carga:
# A) round-robin: Distribuicao sequencial dos 'requests'
# B) ip-hash:
# - Garante que os 'requests' de 'um mesmo client' cairao 'num mesmo server'
#   exceto se o server estiver indisponível.
# C) least_conn: Distribue o 'request' p/ o 'server' c/ menor carga/uso
        least_conn;

# 3.2.2) "server":
# - Define os 'servers' p/ o 'Balanceamento de Carga'
        server revproxbal_webapp_1:8080;
        server revproxbal_webapp_2:8080;
# A) "revproxbal": Container do Docker
# B) "_webapp_": nome do Service no Docker-Compose
# C) "1" : numero do container (2 formas):
#          - 'docker-scale-escalado': https://www.youtube.com/watch?v=9aOpRhm33oM
#          - 'replicado no compose': https://www.youtube.com/watch?v=bFZurhL14LA
# D) ":8080": Porta escutada no Container do Docker

# 3.2.3) ASPECTOS RELEVANTES SOBRE A SCALING:
# STATIC-SCALING (PRESETADA NO DOCKER-COMPOSE)
#    - Totalmente possivel do nginx
#    - Criando os clones da webapp "AB-INITIO" no COMPOSE

#OBS1: Os services 'App' e 'Nginx' deverao estar na mesma 'network' no compose
    }

# 3.3
    server {

# 3.3.1: Nginx escuta na porta 8080 para 'requests' HTTP.
        listen 80;
        server_name meu-ip.com.br;

# 3.3.2: Gzip (PERFORMANCE)
# - Nginx comprime os 'files' das 'responses'
# - antes de envia-los p/ o 'client/browser'
# - Reduz ate 70% a 80% dos files, melhorando o desempenho
        gzip on;

# - Compressao de DADOS (nao so files) nas 'requests do proxies' do 'UpStream'
# - By default, so comprime 'requests' "> 20Bytes" (quase t.odos), pois:
#   - O 'Header de Compressao' tem 5bytes (ex request_15 Bytes + 5 HeaderCompress = ja daria 20Bytes)
#   - Exemplo: Os Jsons { "age": 30 } = 14 Bytes OU { "nome": "John Doe" } = 20 Bytes
        gzip_proxied any;

# - Gzip_types:
# - Especifica os tipos de conteúdo que devem ser comprimidos
# - Compremir videos/imagens/pdf nao compensa a cpu usada na compressao
# - EXCETO: SVG pois, de fato, e um 'txt vetorizado' logo ele e' 'gzipavel'
        gzip_types text/plain text/xml text/css text/html text/javascript application/xml+rss
        application/javascript application/json application/xml application/x-javascript;


# - Melhora a compressao (padrao e 5)
        gzip_comp_level 6;

        # REGRAS de REDIRECIONAMENTO no PROXY-REVERSO
        location / {
        #PROXY REVERSO
        #a)"/": QQuer 'request' dominio, caira aqui

            #ELEMENTOS DE REDIRECIONAMENTO DO PROXY REVERSO (url-no-browser)
            #a) "proxy_pass": 'servers-para-loadbalancing' (Upstream)
            #b) "URL-Root no controller Spring": '/users'
            proxy_pass http://servers-para-loadbalancing/users;

                # Desativa o redirecionamento de proxy
                # Impedindo 'alteracoes de redirecionamento' nos
                # 'Headers de redirecionamento' dos 'servers do Upstream'
                proxy_redirect off;

                # Define o 'Header Host' p/ o host original
                # garantindo que o 'server do upstream'
                proxy_set_header Host $host;

                # Define o 'Header X-Real-IP' p/ o IP do cliente
                # permitindo que o 'server do upstream saiba
                # o endereço 'IP real do Client do request'
                proxy_set_header X-Real-IP $remote_addr;

                # Define o 'Header X-Forwarded-For' p/ o IP do cliente
                # permitindo que o 'server do upstream' saiba
                # o 'IP real do Client do request'
                especialmente útil em cenários de proxy reverso.
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}