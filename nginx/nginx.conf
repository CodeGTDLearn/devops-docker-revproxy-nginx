# EXAMPLE: https://github.com/wesleymilan/nginx-for-nodejs/blob/main/config/nginx/nginx.conf
# 1.0) worker_processes (number | auto):
# - Define quantos processos de trabalho/request serao criados
# - number: Deve acompanhar o numero de 'cores' da 'CPU do 'server de deploy'
# - auto: autodetecta o total de cores disponiveis na 'CPU do 'server de deploy'
# - Ex: 01 Core-CPU p/ cada 'worker_process'
worker_processes auto;

# 2.0) error_log: LOG Localizacao
error_log /var/log/nginx/error.log warn;

# 3.0) events: como o Nginx gerencia as conexões de rede
events {
# 3.1) worker_connections: (PERFORMANCE)
# - Qtde de 'conexões simultaneas' cada 'worker_processes' roda
# - EX: 1024 'work_connections': suporta ate 1024 requests/second
            worker_connections 1024;
}

# 4) http: Comportamento Geral das conexões HTTP rodadas nos 'worker_processes'
http {

# 4.0) Includes 'file' extensions to MIME types of responses + defines the default type.
    include /etc/nginx/nginx_mime.types;

# 4.1) sendfile: (PERFORMANCE)
# - Define o 'OS' para transferir os files 'direto' do disco p/ 'rede/client'
# - nao passando pelo 'buffer do Nginx' - Economiza CPU e Memoria
    sendfile on;

# 4.2) server_tokens: Suprime o Versao do Nginx na Request (SEGURANCA)
     server_tokens off;

# 4.3) client_max_body_size: Size Maximo do 'body' da request (SEGURANCA)
    client_max_body_size 1m;

# 4.5.3: gzip: (PERFORMANCE)
# A) Comprime os 'files' das 'responses' antes de envia-los p/ o 'client'
    gzip on;

# 4.5.4: gzip_proxied: (PERFORMANCE)
# - Comprime os 'payloads dos requests' nos 'servers especificados no UpStream'
#   - Nginx Default: Comprime 'requests' "> de 20Bytes" (quase to_dos), pois:
#     - O 'Compress-Header'(5bytes) + 'Request_15 Bytes' = ja daria 20Bytes
#       - Ex.: Os Jsons {"age": 30} = 15Bytes | {"nome": "John Doe"} = 20Bytes
    gzip_proxied any;

# 4.5.5 gzip_types: (PERFORMANCE)
# - Especifica os conteúdos p/ compressao
# - Videos/imagens/pdf nao compensa a cpu usada na compressao (pouca compressao)
# - EXCETO: SVG pois, de fato este e um 'txt vetorizado' logo ele e' 'gzipavel'
    gzip_types text/plain text/xml text/css text/html text/javascript application/xml+rss \
    application/javascript application/json application/xml application/x-javascript;

# 4.5.6 gzip_comp_level: (PERFORMANCE)
# - Melhora a taxa de compressao (padrao e 5)
    gzip_comp_level 6;

# 4.4) upstream: (PERFORMANCE)
# - Define o 'grupo de servers' do 'balanceamento de carga'
    upstream grupo-de-servers-loadbalancing {

# 4.4.1) Tipo de Algoritmo de 'LoadBalancing':
# A) round-robin: Distribuicao sequencial dos 'requests'
# B) ip-hash: Permite 'requests' de 'um mesmo client' cairem 'num mesmo server'
#    exceto se o server estiver indisponível.
# C) least_conn: Enviar o 'request' p/ o 'server' c/ 'menor uso' no momento
        least_conn;

# 4.4.2) server: Define os 'servers' p/ o 'LoadBalancing' (PERFORMANCE)
        server revproxbal_webapp_1:8080;
        server revproxbal_webapp_2:8080;
# A) "revproxbal": Container do Docker
# B) "_webapp_": nome do Service no Docker-Compose
# C) "1" : numero da replica do container (2 formas):
#    - docker-scale: https://www.youtube.com/watch?v=9aOpRhm33oM
#    - duplicacao no compose: https://www.youtube.com/watch?v=bFZurhL14LA
# D) ":8080": Porta escutada nos 'Services Replicados'
# OBS1: Os services do 'App' e 'Nginx' devem estar na mesma 'network' no compose

    }

# 4.5) server: PROXY
    #include /etc/nginx/http.d/01 - server_default.conf;
    include /etc/nginx/http.d/02 - server_config.conf;
}